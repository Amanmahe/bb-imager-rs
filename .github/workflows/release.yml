name: Create Release artifacts

on:
  push:
    branches: [ "main" ]
    tags:
      - v*

env:
  CARGO_TERM_COLOR: always
  VERBOSE: 1

defaults:
  run:
    shell: bash

jobs:
  native:
    strategy:
      matrix:
        platform:
          - os-name: Linux x86_64
            runs-on: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            make-targets: setup-debian-deps package-cli-linux-deb package-cli-linux-targz package-gui-linux-targz package-gui-linux-appimage package-gui-linux-deb
            bcf: 1
            pb2: 0

          - os-name: Linux aarch64
            runs-on: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            make-targets: setup-debian-deps package-cli-linux-deb package-cli-linux-targz package-gui-linux-targz package-gui-linux-appimage package-gui-linux-deb package-service-linux-targz package-service-linux-deb
            bcf: 1
            pb2: 1

          - os-name: Windows aarch64
            runs-on: windows-latest
            target: aarch64-pc-windows-msvc
            make-targets: package-gui-windows-portable
            bcf: 1
            pb2: 0

          - os-name: Windows x86_64
            runs-on: windows-latest
            target: x86_64-pc-windows-msvc
            make-targets: package-gui-windows-wix package-gui-windows-portable
            bcf: 1
            pb2: 0

          - os-name: MacOS aarch64
            runs-on: macos-latest
            target: aarch64-apple-darwin
            make-targets: package-gui-macos-dmg
            bcf: 0
            pb2: 0

          - os-name: MacOS x86_64
            runs-on: macos-latest
            target: x86_64-apple-darwin
            make-targets: package-gui-macos-dmg
            bcf: 0
            pb2: 0

    name: Build Artifacts - ${{ matrix.platform.os-name }}
    runs-on: ${{ matrix.platform.runs-on }}
    env:
      PB2_MSPM0: ${{ matrix.platform.pb2 }}
      BCF_CC1352P7: ${{ matrix.platform.bcf }}
      BCF_MSP430: ${{ matrix.platform.bcf }}
      TARGET: ${{ matrix.platform.target }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        lfs: true
    - name: Select rust toolchain
      run: rustup toolchain install stable --profile minimal
    - name: Add ${{ matrix.platform.target }} target
      run:  rustup target add ${{ matrix.platform.target }}
    - name: Use caching
      uses: Swatinem/rust-cache@v2
    - name: Install packaging deps
      run: make setup-packaging-deps

    - name: Setup macos signing
      if: runner.os == 'macOS'
      working-directory: bb-imager-gui
      env:
        CERT_DEVELOPER_APP_BASE64: ${{ secrets.CERT_DEVELOPER_APP_BASE64 }}
        CERT_DEVELOPER_INSTALL_BASE64: ${{ secrets.CERT_DEVELOPER_INSTALL_BASE64 }}
        CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APP_PASSWORD }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
      run: |
        echo "$CERT_DEVELOPER_APP_BASE64" | base64 --decode > developer_app.p12
        echo "$CERT_DEVELOPER_INSTALL_BASE64" | base64 --decode > developer_installer.p12

        security create-keychain -p "" build.keychain-db
        security default-keychain -s build.keychain-db
        security unlock-keychain -p "" build.keychain-db

        security import developer_app.p12 -k build.keychain-db -P "$CERT_PASSWORD" -T /usr/bin/codesign
        security import developer_installer.p12 -k build.keychain-db -P "$CERT_PASSWORD" -T /usr/bin/productsign

        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain-db

        xcrun notarytool store-credentials "AC_PASSWORD" \
          --apple-id "${{ secrets.APPLE_ID }}" \
          --team-id "${{ secrets.TEAM_ID }}" \
          --password "${{ secrets.APP_PASSWORD }}"

        echo "" >> Cargo.toml
        echo "[package.metadata.packager.macos]" >> Cargo.toml
        echo "signing_identity = \"${{ secrets.TEAM_ID }}\"" >> Cargo.toml

    - name: Build packages
      run: make ${{ matrix.platform.make-targets }}

    - name: Notarize and Staple macOS DMG
      if: runner.os == 'macOS' && startsWith(github.ref, 'refs/tags/')
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APP_PASSWORD }}
        TEAM_ID: ${{ secrets.TEAM_ID }}
      run: |
        for dmg in bb-imager-gui/dist/*.dmg; do
          echo "Submitting $dmg for notarization..."
          xcrun notarytool submit "$dmg" \
            --keychain-profile "AC_PASSWORD" \
            --wait

          echo "Stapling $dmg..."
          xcrun stapler staple "$dmg"

          echo "Validating stapled $dmg..."
          xcrun stapler validate "$dmg"
        done

    - name: Rename Pre-Release Packages
      if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
      run: make package-rename
    - name: Pre-Release
      uses: softprops/action-gh-release@v2
      if: ${{ ! startsWith(github.ref, 'refs/tags/') }}
      with:
        prerelease: true
        name: Continuous Release
        tag_name: continuous-release
        files: |
          bb-imager-gui/dist/*
          bb-imager-cli/dist/*
          bb-imager-service/dist/*
    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        generate_release_notes: true
        files: |
          bb-imager-gui/dist/*
          bb-imager-cli/dist/*
          bb-imager-service/dist/*
