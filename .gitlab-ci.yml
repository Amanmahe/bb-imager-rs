stages:
  - test
  - build
  - deploy

test:
  image: "rust:latest"
  stage: test
  tags:
    - docker-amd64
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends libudev-dev
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo test --workspace --verbose

# Build all possible images in Linux host
linux_host:
  image: "rust:latest"
  tags:
    - docker-amd64
  stage: build
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends file wget libudev-dev gcc-mingw-w64
    - curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/cargo-dist/releases/download/v0.20.0/cargo-dist-installer.sh | sh
    - cargo install cargo-appimage
    - wget https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-$(uname -m).AppImage -O /usr/local/bin/appimagetool
    - chmod +x /usr/local/bin/appimagetool
    - sed -i 's|AI\x02|\x00\x00\x00|' /usr/local/bin/appimagetool
    - rustup target add x86_64-pc-windows-gnu
  script:
    - cargo dist build --target x86_64-pc-windows-gnu --target x86_64-unknown-linux-gnu
    - cd gui
    - APPIMAGE_EXTRACT_AND_RUN=1 cargo appimage
  artifacts:
    paths:
      - target/distrib/*.zip
      - target/distrib/*.zip.*
      - target/distrib/*.tar.*
      - target/appimage/gui.AppImage

macos:
  image: macos-14-xcode-15
  stage: build
  tags:
    - macos
  before_script:
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - source "$HOME/.cargo/env"
    - curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/cargo-dist/releases/download/v0.20.0/cargo-dist-installer.sh | sh
  script:
    - rustc --version
    - cargo dist build --target aarch64-apple-darwin
  artifacts:
    paths:
      - target/distrib/*.tar.*
