stages:
  - test
  - build
  - deploy

test:
  image: "rust:latest"
  stage: test
  tags:
    - docker-amd64
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends libudev-dev
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo test --workspace --verbose

appimage:
  image: "rust:latest"
  tags:
    - docker-amd64
  stage: build
  before_script:
    - cargo install cargo-appimage
    - apt-get update && apt-get install -y --no-install-recommends file wget libudev-dev
    - wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-$(uname -m).AppImage -O /usr/local/bin/appimagetool
    - chmod +x /usr/local/bin/appimagetool
    - sed -i 's|AI\x02|\x00\x00\x00|' /usr/local/bin/appimagetool
  script:
    - cd gui
    - APPIMAGE_EXTRACT_AND_RUN=1 cargo appimage
  artifacts:
    paths:
      - target/appimage/gui.AppImage

windows:
  image: "rust:latest"
  tags:
    - docker-amd64
  stage: build
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends gcc-mingw-w64
    - rustup target add x86_64-pc-windows-gnu
  script:
    - cargo build --package gui --target x86_64-pc-windows-gnu --release
    - cargo build --package cli --target x86_64-pc-windows-gnu --release
  artifacts:
    paths:
      - target/x86_64-pc-windows-gnu/release/*.exe

macos:
  image: macos-14-xcode-15
  stage: build
  tags:
    - macos
  before_script:
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - source "$HOME/.cargo/env"
  script:
    - rustc --version
    - cargo build --package gui --target aarch64-apple-darwin --release
    - cargo build --package cli --target aarch64-apple-darwin --release
  artifacts:
    paths:
      - target/aarch64-apple-darwin/release/gui
      - target/aarch64-apple-darwin/release/cli
