stages:
  - test
  - build
  - deploy

clippy:
  image: "rust:latest"
  stage: test
  tags:
    - docker-amd64
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends libudev-dev
    - rustup component add clippy
  script:
    - cargo clippy --all-targets --all-features --no-deps

test:
  image: "rust:latest"
  stage: test
  tags:
    - docker-amd64
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends libudev-dev
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - cargo test --workspace --verbose

windows:
  image: "rust:latest"
  tags:
    - docker-amd64
  variables:
    RUST_BUILDER: cargo
  stage: build
  before_script:
    - echo "Download dependencies"
    - apt-get update && apt-get --assume-yes install gcc-mingw-w64 zip
    - rustup target add x86_64-pc-windows-gnu
  script:
    - make release-windows
  artifacts:
    paths:
      - release/

linux_x86_64:
  image: "rust:latest"
  tags:
    - docker-amd64
  variables:
    RUST_BUILDER: cargo
  stage: build
  before_script:
    - echo "Download dependencies"
    - apt-get update && apt-get --assume-yes install libssl-dev libudev-dev desktop-file-utils
    - echo "Setup appimagetool"
    - wget https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-$(uname -m).AppImage -O /usr/local/bin/appimagetool
    - chmod +x /usr/local/bin/appimagetool
    - sed -i 's|AI\x02|\x00\x00\x00|' /usr/local/bin/appimagetool
    - rustup target add x86_64-unknown-linux-gnu
  script:
    - make release-linux-x86_64
  artifacts:
    paths:
      - release/

linux_aarch64:
  image: "rust:latest"
  tags:
    - docker-amd64
  variables:
    RUST_BUILDER: cargo
    CROSS_ARCH: arm64
    PKG_CONFIG_ALLOW_CROSS: 1
    CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
  stage: build
  before_script:
    - echo "Download dependencies"
    - dpkg --add-architecture ${CROSS_ARCH}
    - apt-get update && apt-get --assume-yes install libssl-dev:${CROSS_ARCH} libudev-dev:${CROSS_ARCH} desktop-file-utils gcc-aarch64-linux-gnu
    - echo "Setup appimagetool"
    - wget https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-$(uname -m).AppImage -O /usr/local/bin/appimagetool
    - chmod +x /usr/local/bin/appimagetool
    - sed -i 's|AI\x02|\x00\x00\x00|' /usr/local/bin/appimagetool
    - rustup target add aarch64-unknown-linux-gnu
  script:
    - PKG_CONFIG_PATH="/usr/lib/aarch64-linux-gnu/pkgconfig/:${PKG_CONFIG_PATH}" make release-linux-aarch64
  artifacts:
    paths:
      - release/

linux_arm:
  image: "rust:latest"
  tags:
    - docker-amd64
  variables:
    RUST_BUILDER: cargo
    CROSS_ARCH: armhf
    PKG_CONFIG_ALLOW_CROSS: 1
    CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc
  stage: build
  before_script:
    - echo "Download dependencies"
    - dpkg --add-architecture ${CROSS_ARCH}
    - apt-get update && apt-get --assume-yes install libssl-dev:${CROSS_ARCH} libudev-dev:${CROSS_ARCH} desktop-file-utils gcc-arm-linux-gnueabihf
    - echo "Setup appimagetool"
    - wget https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-$(uname -m).AppImage -O /usr/local/bin/appimagetool
    - chmod +x /usr/local/bin/appimagetool
    - sed -i 's|AI\x02|\x00\x00\x00|' /usr/local/bin/appimagetool
    - rustup target add armv7-unknown-linux-gnueabihf
  script:
    - PKG_CONFIG_PATH="/usr/lib/arm-linux-gnueabihf/pkgconfig/:${PKG_CONFIG_PATH}" make release-linux-arm
  artifacts:
    paths:
      - release/

macos:
  image: macos-14-xcode-15
  stage: build
  tags:
    - macos
  variables:
    RUST_BUILDER: cargo
  before_script:
    - brew install create-dmg rustup git-lfs
    - git lfs install
    - git lfs fetch
    - git lfs checkout
    - rustup target add x86_64-apple-darwin aarch64-apple-darwin
  script:
    - rustc --version
    - make release-darwin
  artifacts:
    paths:
      - release/

deploy:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  variables:
    VERSION: ${CI_COMMIT_TAG}
  before_script:
    - apk add --no-cache make curl
  script:
    - echo "running release_job for $CI_COMMIT_TAG"
    - make upload-artifacts
  release:
    tag_name: $CI_COMMIT_TAG
    name: 'BeagleBoard Imager $CI_COMMIT_TAG'
    description: 'BeagleBoard Image Flasher $CI_COMMIT_TAG'
    assets:
      links:
        - name: 'x86_64-bb-imager-gui-windows.zip'
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/bb-imager-gui/${CI_COMMIT_TAG}/x86_64-pc-windows-gnu.zip'
          link_type: 'package'
        - name: 'x86_64-bb-imager-cli-windows.zip'
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/bb-imager-cli/${CI_COMMIT_TAG}/x86_64-pc-windows-gnu.zip'
          link_type: 'package'
        - name: 'x86_64-bb-imager-gui-linux.AppImage'
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/bb-imager-gui/${CI_COMMIT_TAG}/x86_64-unknown-linux-gnu.AppImage'
          link_type: 'package'
        - name: 'x86_64-bb-imager-cli-linux.xz'
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/bb-imager-cli/${CI_COMMIT_TAG}/x86_64-unknown-linux-gnu.xz'
          link_type: 'package'
        - name: 'aarch64-bb-imager-gui-linux.AppImage'
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/bb-imager-gui/${CI_COMMIT_TAG}/aarch64-unknown-linux-gnu.AppImage'
          link_type: 'package'
        - name: 'aarch64-bb-imager-cli-linux.xz'
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/bb-imager-cli/${CI_COMMIT_TAG}/aarch64-unknown-linux-gnu.xz'
          link_type: 'package'
        - name: 'arm-bb-imager-gui-linux.AppImage'
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/bb-imager-gui/${CI_COMMIT_TAG}/armv7-unknown-linux-gnueabihf.AppImage'
          link_type: 'package'
        - name: 'arm-bb-imager-cli-linux.xz'
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/bb-imager-cli/${CI_COMMIT_TAG}/armv7-unknown-linux-gnueabihf.xz'
          link_type: 'package'
        - name: 'aarch64-bb-imager-cli-darwin.zip'
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/bb-imager-cli/${CI_COMMIT_TAG}/aarch64-apple-darwin.zip'
          link_type: 'package'
        - name: 'x86_64-bb-imager-cli-darwin.zip'
          url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/bb-imager-cli/${CI_COMMIT_TAG}/x86_64-apple-darwin.zip'
          link_type: 'package'
